[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "A Quarto tip a day keeps the docs away",
    "section": "",
    "text": "As part of this project, I will tweet a Quarto tip each day in starting June 28, 2022 for thirty days, from the Quarto account (@quarto_pub), with the hashtag #quartotip. The daily tips / tweets are in no particular order. This website collects each tip as a daily blog post entry, with each blog post linking to “learn more” resources. And, you guessed it, it’s made with Quarto!\nThe target audience for this project is folks who are already somewhat familiar with Quarto. If you’re brand new to Quarto, I recommend getting started here instead."
  },
  {
    "objectID": "posts/02-fenced-echo/index.html",
    "href": "posts/02-fenced-echo/index.html",
    "title": "Fenced echo",
    "section": "",
    "text": "If you, like me, spend most of your time writing teaching materials or documentation, I’m sure you’ll find the chunk option echo: fenced just as useful as I do! When you set this option for a code chunk, the chunk is displayed with the fences around it – without a screenshot or using a special verbatim engine.\nTo get code chunks printed out as\n\n```{r}\n#| label: simple-arithmetic\n#| results: hide\n\n1 + 1\n```\n\nadd the echo: fenced option to your chunk:\n```{r}\n#| echo: fenced\n#| label: simple-arithmetic\n#| results: hide\n\n1 + 1\n```\nNote that in the output all chunk options other than echo: fenced are shown, so this is a great tool for teaching chunk options as well."
  },
  {
    "objectID": "posts/02-fenced-echo/index.html#learn-more",
    "href": "posts/02-fenced-echo/index.html#learn-more",
    "title": "Fenced echo",
    "section": "Learn more",
    "text": "Learn more\nFenced echo execution option"
  },
  {
    "objectID": "posts/05-output-location/output-location.html#default",
    "href": "posts/05-output-location/output-location.html#default",
    "title": "A Quarto tip a day",
    "section": "default",
    "text": "default\n\n\n\n\n```{r}\n\nggplot(penguins, \n       aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_OkabeIto()\n```"
  },
  {
    "objectID": "posts/05-output-location/output-location.html#output-location-fragment",
    "href": "posts/05-output-location/output-location.html#output-location-fragment",
    "title": "A Quarto tip a day",
    "section": "output-location: fragment",
    "text": "output-location: fragment\n\n```{r}\n#| output-location: fragment\n\nggplot(penguins, \n       aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_OkabeIto()\n```"
  },
  {
    "objectID": "posts/05-output-location/output-location.html#output-location-slide",
    "href": "posts/05-output-location/output-location.html#output-location-slide",
    "title": "A Quarto tip a day",
    "section": "output-location: slide",
    "text": "output-location: slide\n\n```{r}\n#| output-location: slide\n\nggplot(penguins, \n       aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_OkabeIto()\n```"
  },
  {
    "objectID": "posts/05-output-location/output-location.html#output-location-slide-output",
    "href": "posts/05-output-location/output-location.html#output-location-slide-output",
    "title": "A Quarto tip a day",
    "section": "output-location: slide",
    "text": "output-location: slide"
  },
  {
    "objectID": "posts/05-output-location/output-location.html#output-location-column",
    "href": "posts/05-output-location/output-location.html#output-location-column",
    "title": "A Quarto tip a day",
    "section": "output-location: column",
    "text": "output-location: column\n\n\n```{r}\n#| output-location: column\n#| fig-width: 6\n#| fig-height: 4\n\nggplot(penguins, \n       aes(x = bill_length_mm, \n           y = bill_depth_mm, \n           color = species)) +\n  geom_point() +\n  scale_color_OkabeIto()\n```"
  },
  {
    "objectID": "posts/05-output-location/output-location.html#output-location-column-fragment",
    "href": "posts/05-output-location/output-location.html#output-location-column-fragment",
    "title": "A Quarto tip a day",
    "section": "output-location: column-fragment",
    "text": "output-location: column-fragment\n\n\n```{r}\n#| output-location: column-fragment\n#| fig-width: 6\n#| fig-height: 4\n\nggplot(penguins, \n       aes(x = bill_length_mm, \n           y = bill_depth_mm, \n           color = species)) +\n  geom_point() +\n  scale_color_OkabeIto()\n```"
  },
  {
    "objectID": "posts/05-output-location/index.html",
    "href": "posts/05-output-location/index.html",
    "title": "Output location",
    "section": "",
    "text": "Showing code and output side-by-side or delayed reveal of the output are commonly used techniques for teaching programming when the mode of delivery is slides. The output-location chunk option makes it easy to achieve these.\nPossible values for the output-location option are as follows:\n\nfragment: Display output as a fragment, i.e., delay showing it until it is explicitly stepped through by advancing the slides.\nslide: Display output on the subsequent slide.\ncolumn: Display output in a column adjacent to the code. This splits the slide into two columns, each of which span 50% of the width of the slide\ncolumn-fragment: Display output in a column adjacent to the code and delay showing it until its explicitly stepped through by advancing the slides.\n\nYou can see these in action in the slide deck below.\n\nNote that for the column options I also adjusted fig-height and fig-width since the default size and aspect ration doesn’t work well for figures spanning only half the width of the slide."
  },
  {
    "objectID": "posts/05-output-location/index.html#learn-more",
    "href": "posts/05-output-location/index.html#learn-more",
    "title": "Output location",
    "section": "Learn more",
    "text": "Learn more\nOutput location"
  },
  {
    "objectID": "posts/01-side-by-side-tables/index.html",
    "href": "posts/01-side-by-side-tables/index.html",
    "title": "Side-by-side tables",
    "section": "",
    "text": "Use the layout-ncol chunk option to organize output in columns, e.g., layout-ncol: 2 for two tables side-by-side.\n\n```{r}\n#| tbl-cap: Two tables\n#| tbl-subcap: [\"mtcars\", \"Just cars\"]\n#| layout-ncol: 2\n\nlibrary(knitr)\n\n# table on the left\nkable(head(mtcars[, 1:3]))\n\n# table on the right\nkable(head(cars))\n```\n\n\nTwo tables\n\n\n\n\nmtcars\n\n\n\nmpg\ncyl\ndisp\n\n\n\n\nMazda RX4\n21.0\n6\n160\n\n\nMazda RX4 Wag\n21.0\n6\n160\n\n\nDatsun 710\n22.8\n4\n108\n\n\nHornet 4 Drive\n21.4\n6\n258\n\n\nHornet Sportabout\n18.7\n8\n360\n\n\nValiant\n18.1\n6\n225\n\n\n\n\n\n\nJust cars\n\n\nspeed\ndist\n\n\n\n\n4\n2\n\n\n4\n10\n\n\n7\n4\n\n\n7\n22\n\n\n8\n16\n\n\n9\n10"
  },
  {
    "objectID": "posts/01-side-by-side-tables/index.html#learn-more",
    "href": "posts/01-side-by-side-tables/index.html#learn-more",
    "title": "Side-by-side tables",
    "section": "Learn more",
    "text": "Learn more\nOptions for tables produced by executable code cells"
  },
  {
    "objectID": "posts/03-freeze/index.html",
    "href": "posts/03-freeze/index.html",
    "title": "Freeze",
    "section": "",
    "text": "For Quarto projects with many documents that include code, you probably won’t want to re-execute all of that code each time you render the project. The freeze execution option is helpful for managing that.\nFor example, you might have a Quarto blog and when you render the website you wouldn’t want code from old blog posts to be re-rendered automatically, you would likely prefer to leave them as is as of the date they were published. Or you might be using Quarto for a course website and have slides, homework assignments, etc. in that website that you add as the semester progresses. You wouldn’t want to re-render all of those old documents each time you add new items to your website.\nManaging execution for these purposes is straightforward with Quarto using the freeze option in your _quarto.yml file for your project, e.g.\nexecute:\n  freeze: true\nYou can set this option to true or auto. By default, it’s false.\n\nfreeze: true - Never re-render during project render. If you need the page/document to be re-rendered, you need to render that document individually.\n\nThis is the option I use for blogs as I want to make sure to avoid re-rendering old posts unless I explicitly do so.\n\nfreeze: auto - Re-render only when source changes.\n\nThis is the option I use for my course websites – when I catch a mistake in earlier slide decks, and update the source code, I want those documents re-render next time I render my project, I don’t want to rely on remembering to re-render them myself.\n\n\nNote that freeze controls whether execution occurs during global project renders. If you do render a single document or a sub-directory in a Quarto project, then the code is always executed."
  },
  {
    "objectID": "posts/03-freeze/index.html#learn-more",
    "href": "posts/03-freeze/index.html#learn-more",
    "title": "Freeze",
    "section": "Learn more",
    "text": "Learn more\nManaging execution with freeze"
  },
  {
    "objectID": "posts/04-include/index.html",
    "href": "posts/04-include/index.html",
    "title": "Includes",
    "section": "",
    "text": "If you have content you want to include across many files, you can place that content in a separate Quarto file and use the include comment wherever you want to pull it in.\nThis could be useful for plain text content (e.g., including the same submission instructions for each homework assignment) or for content that includes computation (e.g., including the same data cleaning steps for various alternate analyses).\nSuppose you have such repeatable content in a file called _content-to-repeat.qmd and suppose the contents of that file read Look at me, I’m content to be repeated! (in italics):\n\n\n\n\n\n\ncontent-to-repeat.qmd\n*Look at me, I'm content to be repeated!*\n\n\n\nYou can include it in other documents using the  shortcode:\n{{< include _content-to-repeat.qmd >}}\nThis will result in:\nLook at me I’m content to be repeated!\nA few important things to note:\n\nThe name of the file that will be included should start with an underscore (_) so that they are automatically ignored (i.e. not treated as standalone files) when rendering a project.\nAll computations within a document will share a single engine (e.g., knitr and jupyter), which is relevant when the included file has computations.\nThe included file does not have to be a .qmd if it only contains text, it can also be a .md, .ipynb, etc. However included files with computation in them need to be .qmd, computational includes don’t work in .ipynb notebook files."
  },
  {
    "objectID": "posts/04-include/index.html#learn-more",
    "href": "posts/04-include/index.html#learn-more",
    "title": "Includes",
    "section": "Learn more",
    "text": "Learn more\nIncludes"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Quarto tip a day",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJul 2, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJul 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJun 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJun 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJun 28, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  }
]